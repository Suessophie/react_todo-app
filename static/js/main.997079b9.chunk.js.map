{"version":3,"sources":["components/Form/Form.jsx","shapes/FormShape.jsx","components/Input/Input.jsx","shapes/InputShape.jsx","components/ButtonClearTodo/ButtonClearTodo.jsx","shapes/ButtonClearTodoShape.jsx","components/TodoItem/TodoItem.jsx","shapes/TodoItemShape.jsx","components/TodoList/TodoList.jsx","shapes/TodoListShape.jsx","components/ButtonClearCompleted/ButtonClearCompleted.jsx","shapes/ButtonClearCompletedShape.jsx","App.js","index.js"],"names":["Form","PropTypes","func","isRequired","addNewTodo","useState","newTodo","setNewTodo","onSubmit","event","preventDefault","type","className","placeholder","value","onChange","target","Input","number","bool","id","completed","handleChecked","isTextThrough","checked","ButtonClearTodo","deleteTodo","onClick","TodoItem","string","title","changeTodoTitle","classOfLi","setClassOfLi","editedTitle","setEditedTitle","lineThrough","setLineThrough","onDoubleClick","lineThroughBool","onKeyDown","keyCode","TodoList","arrayOf","shape","todoList","map","todo","key","ButtonClearCompleted","clearCompleted","useLocalStorage","initialValue","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","App","initialTodoList","setInitialTodoList","setTodoList","leftTodo","setLeftTodo","isShowedList","setIsShowedList","filterClass","setFilterClass","filterBy","parametr","filter","filteredList","newTodoObj","Date","left","length","htmlFor","idOfTodo","changedCompleted","changedInitialTodos","initialTodoListAfterDelete","todoListAfterDelete","changedTodos","href","todoListWithoutCompleted","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.997079b9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { FormShape } from '../../shapes/FormShape';\n\nexport const Form = ({ addNewTodo }) => {\n  const [newTodo, setNewTodo] = useState('');\n\n  const enterNewTodo = (event) => {\n    const { value } = event.target;\n\n    setNewTodo(value);\n  };\n\n  const sandNewTodo = (event) => {\n    event.preventDefault();\n\n    addNewTodo(newTodo);\n    setNewTodo('');\n  };\n\n  return (\n    <form\n      onSubmit={sandNewTodo}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodo}\n        onChange={enterNewTodo}\n      />\n    </form>\n  );\n};\n\nForm.propTypes = FormShape;\n","import PropTypes from 'prop-types';\n\nexport const FormShape = PropTypes.func.isRequired;\n","import React from 'react';\nimport { InputShape } from '../../shapes/InputShape';\n\nexport const Input = ({\n  id,\n  completed,\n  handleChecked,\n  isTextThrough,\n}) => (\n  <input\n    type=\"checkbox\"\n    className=\"toggle\"\n    checked={completed}\n    onChange={() => {\n      handleChecked(id, !completed);\n      isTextThrough(!completed);\n    }}\n  />\n);\n\nInput.propTypes = InputShape;\n","import PropTypes from 'prop-types';\n\nexport const InputShape = {\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  handleChecked: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { ButtonClearTodoShape } from '../../shapes/ButtonClearTodoShape';\n\nexport const ButtonClearTodo = ({\n  id,\n  deleteTodo,\n}) => (\n  <button\n    type=\"button\"\n    className=\"destroy\"\n    onClick={() => deleteTodo(id)}\n  />\n);\n\nButtonClearTodo.propTypes = ButtonClearTodoShape;\n","import PropTypes from 'prop-types';\n\nexport const ButtonClearTodoShape = {\n  id: PropTypes.number.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { Input } from '../Input';\nimport { ButtonClearTodo } from '../ButtonClearTodo';\nimport { TodoItemShape } from '../../shapes/TodoItemShape';\nimport './TodoItem.css';\n\nexport const TodoItem = ({\n  id,\n  completed,\n  title,\n  handleChecked,\n  deleteTodo,\n  changeTodoTitle,\n}) => {\n  const [classOfLi, setClassOfLi] = useState('');\n  const [editedTitle, setEditedTitle] = useState(title);\n  const [lineThrough, setLineThrough] = useState(false);\n\n  const updateEditedTitle = (event) => {\n    const { value } = event.target;\n\n    setEditedTitle(value);\n  };\n\n  const pushEditedTitle = (event) => {\n    if (event.keyCode === 13 && editedTitle !== '') {\n      changeTodoTitle(id, editedTitle);\n      setClassOfLi('');\n    }\n\n    if (event.keyCode === 27) {\n      setClassOfLi('');\n    }\n  };\n\n  const isTextThrough = (lineThroughBool) => {\n    setLineThrough(lineThroughBool);\n  };\n\n  return (\n    <li\n      className={classOfLi}\n      onDoubleClick={() => setClassOfLi('editing')}\n    >\n      <div className=\"view\">\n        <Input\n          id={id}\n          completed={completed}\n          handleChecked={handleChecked}\n          isTextThrough={isTextThrough}\n        />\n        <label className={lineThrough ? 'line-through' : ''}>\n          {title}\n        </label>\n        <ButtonClearTodo\n          id={id}\n          deleteTodo={deleteTodo}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={editedTitle}\n        onChange={updateEditedTitle}\n        onKeyDown={pushEditedTitle}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = TodoItemShape;\n","import PropTypes from 'prop-types';\n\nexport const TodoItemShape = {\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  handleChecked: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { TodoItem } from '../TodoItem';\nimport { TodoListShape } from '../../shapes/TodoListShape';\n\nexport const TodoList = ({\n  todoList,\n  handleChecked,\n  deleteTodo,\n  changeTodoTitle,\n}) => (\n  <ul className=\"todo-list\">\n    {todoList.map(todo => (\n      <TodoItem\n        key={todo.id}\n        id={todo.id}\n        completed={todo.completed}\n        title={todo.title}\n        handleChecked={handleChecked}\n        deleteTodo={deleteTodo}\n        changeTodoTitle={changeTodoTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = TodoListShape;\n","import PropTypes from 'prop-types';\n\nexport const TodoListShape = {\n  todoList: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired).isRequired,\n  handleChecked: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { ButtonClearCompletedShape } from\n  '../../shapes/ButtonClearCompletedShape';\n\nexport const ButtonClearCompleted = ({ clearCompleted }) => (\n  <button\n    type=\"button\"\n    className=\"clear-completed\"\n    onClick={clearCompleted}\n  >\n    Clear completed\n  </button>\n);\n\nButtonClearCompleted.propTypes = ButtonClearCompletedShape;\n","import PropTypes from 'prop-types';\n\nexport const ButtonClearCompletedShape\n  = PropTypes.func.isRequired;\n","import React, { useState } from 'react';\nimport { Form } from './components/Form';\nimport { TodoList } from './components/TodoList';\nimport { ButtonClearCompleted } from './components/ButtonClearCompleted';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(\n    JSON.parse(localStorage.getItem(key)) || initialValue,\n  );\n\n  const save = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n};\n\nfunction App() {\n  const [initialTodoList, setInitialTodoList] = useLocalStorage('todos', []);\n  const [todoList, setTodoList] = useLocalStorage('todos', []);\n  const [leftTodo, setLeftTodo] = useState(0);\n  const [isShowedList, setIsShowedList] = useState(true);\n  const [filterClass, setFilterClass] = useState('all');\n\n  const addNewTodo = (newTodo) => {\n    const newTodoObj = {\n      id: +new Date(),\n      title: newTodo,\n      completed: false,\n    };\n    const left = initialTodoList.filter(\n      todo => todo.completed === false,\n    ).length + 1;\n\n    if (filterClass !== 'completed') {\n      setTodoList([...todoList, newTodoObj]);\n    }\n\n    setInitialTodoList([...initialTodoList, newTodoObj]);\n    setLeftTodo(left);\n  };\n\n  const handleChecked = (idOfTodo, changedCompleted) => {\n    const changedInitialTodos = initialTodoList.map((todo) => {\n      if (todo.id === idOfTodo) {\n        return {\n          ...todo,\n          completed: changedCompleted,\n        };\n      }\n\n      return { ...todo };\n    });\n\n    const left = changedInitialTodos.filter(\n      todo => todo.completed === false,\n    ).length;\n\n    setInitialTodoList(changedInitialTodos);\n    setLeftTodo(left);\n\n    if (filterClass === 'all') {\n      setTodoList(changedInitialTodos);\n    } else {\n      const filter = filterClass === 'completed';\n      const filteredList = changedInitialTodos.filter(\n        todo => todo.completed === filter,\n      );\n\n      setTodoList(filteredList);\n    }\n  };\n\n  const deleteTodo = (idOfTodo) => {\n    const initialTodoListAfterDelete = initialTodoList.filter(\n      todo => todo.id !== idOfTodo,\n    );\n\n    const todoListAfterDelete = todoList.filter(\n      todo => todo.id !== idOfTodo,\n    );\n\n    const left = initialTodoListAfterDelete.filter(\n      todo => todo.completed === false,\n    ).length;\n\n    setInitialTodoList(initialTodoListAfterDelete);\n    setTodoList(todoListAfterDelete);\n    setLeftTodo(left);\n  };\n\n  const changeTodoTitle = (idOfTodo, editedTitle) => {\n    const changedInitialTodos = initialTodoList.map((todo) => {\n      if (todo.id === idOfTodo) {\n        return {\n          ...todo,\n          title: editedTitle,\n        };\n      }\n\n      return { ...todo };\n    });\n\n    const changedTodos = todoList.map((todo) => {\n      if (todo.id === idOfTodo) {\n        return {\n          ...todo,\n          title: editedTitle,\n        };\n      }\n\n      return { ...todo };\n    });\n\n    setInitialTodoList(changedInitialTodos);\n    setTodoList(changedTodos);\n  };\n\n  const clearCompleted = () => {\n    const todoListWithoutCompleted = initialTodoList.filter(\n      todo => todo.completed === false,\n    );\n\n    setTodoList(todoListWithoutCompleted);\n    setInitialTodoList(todoListWithoutCompleted);\n  };\n\n  const filterBy = (parametr) => {\n    setFilterClass(parametr);\n\n    if (parametr === 'all') {\n      setTodoList(initialTodoList);\n    } else {\n      const filter = parametr === 'completed';\n      const filteredList = initialTodoList.filter(\n        todo => todo.completed === filter,\n      );\n\n      setTodoList(filteredList);\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <Form addNewTodo={addNewTodo} />\n      </header>\n\n      {!!initialTodoList.length && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              onChange={() => setIsShowedList(!isShowedList)}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            {isShowedList && (\n              <TodoList\n                todoList={todoList}\n                handleChecked={handleChecked}\n                deleteTodo={deleteTodo}\n                changeTodoTitle={changeTodoTitle}\n              />\n            )}\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${leftTodo} items left`}\n            </span>\n\n            <ul className=\"filters\">\n              <li>\n                <a\n                  href=\"#/\"\n                  className={filterClass === 'all' ? 'selected' : ''}\n                  onClick={() => filterBy('all')}\n                >\n                  All\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/active\"\n                  className={filterClass === 'active' ? 'selected' : ''}\n                  onClick={() => filterBy('active')}\n                >\n                  Active\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/completed\"\n                  className={filterClass === 'completed' ? 'selected' : ''}\n                  onClick={() => filterBy('completed')}\n                >\n                  Completed\n                </a>\n              </li>\n            </ul>\n\n            <ButtonClearCompleted clearCompleted={clearCompleted} />\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}