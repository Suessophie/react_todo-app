{"version":3,"sources":["components/Form/Form.jsx","shapes/FormShape.jsx","components/Input/Input.jsx","shapes/InputShape.jsx","components/ButtonClearTodo/ButtonClearTodo.jsx","shapes/ButtonClearTodoShape.jsx","components/TodoItem/TodoItem.jsx","shapes/TodoItemShape.jsx","components/TodoList/TodoList.jsx","shapes/TodoListShape.jsx","components/ButtonClearCompleted/ButtonClearCompleted.jsx","shapes/ButtonClearCompletedShape.jsx","App.js","index.js"],"names":["Form","PropTypes","func","isRequired","addNewTodo","useState","newTodo","setNewTodo","onSubmit","event","preventDefault","type","className","placeholder","value","onChange","target","Input","number","bool","id","completed","handleChecked","checked","ButtonClearTodo","deleteTodo","onClick","TodoItem","string","title","changeTodoTitle","todoClass","setTodoClass","editedTitle","setEditedTitle","lineThrough","onDoubleClick","cn","onKeyDown","key","TodoList","arrayOf","shape","todoList","map","todo","ButtonClearCompleted","clearCompleted","useLocalStorage","initialValue","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","App","initialTodoList","setInitialTodoList","setTodoList","leftTodo","setLeftTodo","filterClass","setFilterClass","markAll","setMarkAll","filterBy","parametr","filter","filteredList","Date","activeTodosCount","initialTodo","length","updatedMarkAll","markedAllTodos","markedTodo","htmlFor","isCompleted","changedInitialTodos","markedAll","every","idOfTodo","initialTodoListAfterDelete","todoListAfterDelete","changedTodos","href","todoListWithoutCompleted","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe1fcb18.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { FormShape } from '../../shapes/FormShape';\n\nexport const Form = ({ addNewTodo }) => {\n  const [newTodo, setNewTodo] = useState('');\n\n  const enterNewTodo = (event) => {\n    const { value } = event.target;\n\n    setNewTodo(value);\n  };\n\n  const sandNewTodo = (event) => {\n    event.preventDefault();\n\n    addNewTodo(newTodo);\n    setNewTodo('');\n  };\n\n  return (\n    <form\n      onSubmit={sandNewTodo}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodo}\n        onChange={enterNewTodo}\n      />\n    </form>\n  );\n};\n\nForm.propTypes = FormShape;\n","import PropTypes from 'prop-types';\n\nexport const FormShape = PropTypes.func.isRequired;\n","import React from 'react';\nimport { InputShape } from '../../shapes/InputShape';\n\nexport const Input = ({\n  id,\n  completed,\n  handleChecked,\n}) => (\n  <input\n    type=\"checkbox\"\n    className=\"toggle\"\n    checked={completed}\n    onChange={() => {\n      handleChecked(id, !completed);\n    }}\n  />\n);\n\nInput.propTypes = InputShape;\n","import PropTypes from 'prop-types';\n\nexport const InputShape = {\n  id: PropTypes.number,\n  completed: PropTypes.bool,\n  handleChecked: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { ButtonClearTodoShape } from '../../shapes/ButtonClearTodoShape';\n\nexport const ButtonClearTodo = ({\n  id,\n  deleteTodo,\n}) => (\n  <button\n    type=\"button\"\n    className=\"destroy\"\n    onClick={() => deleteTodo(id)}\n  />\n);\n\nButtonClearTodo.propTypes = ButtonClearTodoShape;\n","import PropTypes from 'prop-types';\n\nexport const ButtonClearTodoShape = {\n  id: PropTypes.number,\n  deleteTodo: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { Input } from '../Input';\nimport { ButtonClearTodo } from '../ButtonClearTodo';\nimport { TodoItemShape } from '../../shapes/TodoItemShape';\nimport './TodoItem.css';\n\nexport const TodoItem = ({\n  id,\n  completed,\n  title,\n  handleChecked,\n  deleteTodo,\n  changeTodoTitle,\n}) => {\n  const [todoClass, setTodoClass] = useState('');\n  const [editedTitle, setEditedTitle] = useState(title);\n  const lineThrough = completed;\n\n  const updateEditedTitle = (event) => {\n    const { value } = event.target;\n\n    setEditedTitle(value);\n  };\n\n  const pushEditedTitle = (event) => {\n    if (event.key === 'Enter' && editedTitle !== '') {\n      changeTodoTitle(id, editedTitle);\n      setTodoClass('');\n    }\n\n    if (event.key === 'Escape') {\n      setTodoClass('');\n    }\n  };\n\n  return (\n    <li\n      className={todoClass}\n      onDoubleClick={() => setTodoClass('editing')}\n    >\n      <div className=\"view\">\n        <Input\n          id={id}\n          completed={completed}\n          handleChecked={handleChecked}\n        />\n        <label\n          className={cn({ 'line-through': lineThrough })}\n        >\n          {title}\n        </label>\n        <ButtonClearTodo\n          id={id}\n          deleteTodo={deleteTodo}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={editedTitle}\n        onChange={updateEditedTitle}\n        onKeyDown={pushEditedTitle}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = TodoItemShape;\n","import PropTypes from 'prop-types';\n\nexport const TodoItemShape = {\n  id: PropTypes.number,\n  completed: PropTypes.bool,\n  title: PropTypes.string,\n  handleChecked: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { TodoItem } from '../TodoItem';\nimport { TodoListShape } from '../../shapes/TodoListShape';\n\nexport const TodoList = ({\n  todoList,\n  handleChecked,\n  deleteTodo,\n  changeTodoTitle,\n}) => (\n  <ul className=\"todo-list\">\n    {todoList.map(todo => (\n      <TodoItem\n        key={todo.id + todo.title}\n        id={todo.id}\n        completed={todo.completed}\n        title={todo.title}\n        handleChecked={handleChecked}\n        deleteTodo={deleteTodo}\n        changeTodoTitle={changeTodoTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = TodoListShape;\n","import PropTypes from 'prop-types';\n\nexport const TodoListShape = {\n  todoList: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired).isRequired,\n  handleChecked: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { ButtonClearCompletedShape } from\n  '../../shapes/ButtonClearCompletedShape';\n\nexport const ButtonClearCompleted = ({ clearCompleted }) => (\n  <button\n    type=\"button\"\n    className=\"clear-completed\"\n    onClick={clearCompleted}\n  >\n    Clear completed\n  </button>\n);\n\nButtonClearCompleted.propTypes = ButtonClearCompletedShape;\n","import PropTypes from 'prop-types';\n\nexport const ButtonClearCompletedShape\n  = PropTypes.func.isRequired;\n","import React, { useState } from 'react';\nimport { Form } from './components/Form';\nimport { TodoList } from './components/TodoList';\nimport { ButtonClearCompleted } from './components/ButtonClearCompleted';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(\n    JSON.parse(localStorage.getItem(key)) || initialValue,\n  );\n\n  const saveValue = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, saveValue];\n};\n\nfunction App() {\n  const [initialTodoList, setInitialTodoList] = useLocalStorage('todos', []);\n  const [todoList, setTodoList] = useLocalStorage('todos', []);\n  const [leftTodo, setLeftTodo] = useState(0);\n  const [filterClass, setFilterClass] = useState('all');\n  const [markAll, setMarkAll] = useState(false);\n\n  const addNewTodo = (title) => {\n    const newTodo = {\n      id: +new Date(),\n      title,\n      completed: false,\n    };\n\n    const activeTodosCount = initialTodoList.filter(\n      initialTodo => initialTodo.completed === false,\n    ).length + 1;\n\n    if (filterClass !== 'completed') {\n      setTodoList([...todoList, newTodo]);\n    }\n\n    setInitialTodoList([...initialTodoList, newTodo]);\n    setLeftTodo(activeTodosCount);\n  };\n\n  const handleChecked = (id, isCompleted) => {\n    const changedInitialTodos = initialTodoList.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: isCompleted,\n        };\n      }\n\n      return { ...todo };\n    });\n\n    const activeTodosCount = changedInitialTodos.filter(\n      todo => todo.completed === false,\n    ).length;\n\n    setInitialTodoList(changedInitialTodos);\n    setLeftTodo(activeTodosCount);\n\n    if (filterClass === 'all') {\n      setTodoList(changedInitialTodos);\n    } else {\n      const filter = filterClass === 'completed';\n      const filteredList = changedInitialTodos.filter(\n        todo => todo.completed === filter,\n      );\n\n      setTodoList(filteredList);\n    }\n\n    const markedAll = changedInitialTodos.every(\n      todo => todo.completed === true,\n    );\n\n    setMarkAll(markedAll);\n  };\n\n  const deleteTodo = (idOfTodo) => {\n    const initialTodoListAfterDelete = initialTodoList.filter(\n      todo => todo.id !== idOfTodo,\n    );\n\n    const todoListAfterDelete = todoList.filter(\n      todo => todo.id !== idOfTodo,\n    );\n\n    const activeTodosCount = initialTodoListAfterDelete.filter(\n      todo => todo.completed === false,\n    ).length;\n\n    setInitialTodoList(initialTodoListAfterDelete);\n    setTodoList(todoListAfterDelete);\n    setLeftTodo(activeTodosCount);\n  };\n\n  const changeTodoTitle = (idOfTodo, editedTitle) => {\n    const changedInitialTodos = initialTodoList.map((todo) => {\n      if (todo.id === idOfTodo) {\n        return {\n          ...todo,\n          title: editedTitle,\n        };\n      }\n\n      return { ...todo };\n    });\n\n    const changedTodos = todoList.map((todo) => {\n      if (todo.id === idOfTodo) {\n        return {\n          ...todo,\n          title: editedTitle,\n        };\n      }\n\n      return { ...todo };\n    });\n\n    setInitialTodoList(changedInitialTodos);\n    setTodoList(changedTodos);\n  };\n\n  const clearCompleted = () => {\n    const todoListWithoutCompleted = initialTodoList.filter(\n      todo => todo.completed === false,\n    );\n\n    setInitialTodoList(todoListWithoutCompleted);\n\n    if (filterClass === 'all') {\n      setTodoList(todoListWithoutCompleted);\n    } else {\n      const filter = filterClass === 'completed';\n      const filteredList = todoListWithoutCompleted.filter(\n        todo => todo.completed === filter,\n      );\n\n      setTodoList(filteredList);\n    }\n  };\n\n  const filterBy = (parametr) => {\n    setFilterClass(parametr);\n\n    if (parametr === 'all') {\n      setTodoList(initialTodoList);\n    } else {\n      const filter = parametr === 'completed';\n      const filteredList = initialTodoList.filter(\n        todo => todo.completed === filter,\n      );\n\n      setTodoList(filteredList);\n    }\n  };\n\n  const markAllAsComplete = () => {\n    const updatedMarkAll = !markAll;\n\n    const markedAllTodos = initialTodoList.map((todo) => {\n      const markedTodo = {\n        ...todo,\n        completed: updatedMarkAll,\n      };\n\n      return { ...markedTodo };\n    });\n\n    setInitialTodoList(markedAllTodos);\n    setMarkAll(updatedMarkAll);\n\n    if (filterClass === 'all') {\n      setTodoList(markedAllTodos);\n    } else {\n      const filter = filterClass === 'completed';\n      const filteredList = markedAllTodos.filter(\n        todo => todo.completed === filter,\n      );\n\n      setTodoList(filteredList);\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <Form addNewTodo={addNewTodo} />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={markAll}\n          onChange={markAllAsComplete}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          todoList={todoList}\n          handleChecked={handleChecked}\n          deleteTodo={deleteTodo}\n          changeTodoTitle={changeTodoTitle}\n        />\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${leftTodo} items left`}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={filterClass === 'all' ? 'selected' : ''}\n              onClick={() => filterBy('all')}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              className={filterClass === 'active' ? 'selected' : ''}\n              onClick={() => filterBy('active')}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              className={filterClass === 'completed' ? 'selected' : ''}\n              onClick={() => filterBy('completed')}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        <ButtonClearCompleted clearCompleted={clearCompleted} />\n      </footer>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}