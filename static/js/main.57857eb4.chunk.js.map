{"version":3,"sources":["Form.jsx","Input.jsx","ButtonClearTodo.jsx","TodoItem.jsx","TodoList.jsx","ButtonClearCompleted.jsx","App.js","index.js"],"names":["Form","addNewTodo","useState","newTodo","setNewTodo","onSubmit","event","preventDefault","type","className","placeholder","value","onChange","target","Input","id","completed","handleChecked","checked","ButtonClearTodo","deleteTodo","onClick","TodoItem","title","changeTodoTitle","classOfLi","setClassOfLi","editedTitle","setEditedTitle","onDoubleClick","onKeyDown","keyCode","TodoList","todoList","map","todo","key","ButtonClearCompleted","clearCompleted","App","setTodoList","initialTodoList","setInitialTodoList","leftTodo","setLeftTodo","isShowedList","setIsShowedList","filterClass","setFilterClass","filterBy","parametr","filter","filteredList","newTodoObj","Date","left","length","htmlFor","idOfTodo","changedCompleted","changedInitialTodos","initialTodoListAfterDelete","todoListAfterDelete","changedTodos","href","todoListWithoutCompleted","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57857eb4.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport const Form = ({ addNewTodo }) => {\n  const [newTodo, setNewTodo] = useState('');\n\n  const enterNewTodo = (event) => {\n    const { value } = event.target;\n\n    setNewTodo(value);\n  };\n\n  const sandNewTodo = (event) => {\n    event.preventDefault();\n\n    addNewTodo(newTodo);\n    setNewTodo('');\n  };\n\n  return (\n    <form\n      onSubmit={sandNewTodo}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodo}\n        onChange={enterNewTodo}\n      />\n    </form>\n  );\n};\n","import React from 'react';\n\nexport const Input = ({\n  id,\n  completed,\n  handleChecked,\n}) => (\n  <input\n    type=\"checkbox\"\n    className=\"toggle\"\n    checked={completed}\n    onChange={() => handleChecked(id, !completed)}\n  />\n);\n","import React from 'react';\n\nexport const ButtonClearTodo = ({\n  id,\n  deleteTodo,\n}) => (\n  <button\n    type=\"button\"\n    className=\"destroy\"\n    onClick={() => deleteTodo(id)}\n  />\n);\n","import React, { useState } from 'react';\nimport { Input } from './Input';\nimport { ButtonClearTodo } from './ButtonClearTodo';\n\nexport const TodoItem = ({\n  id,\n  completed,\n  title,\n  handleChecked,\n  deleteTodo,\n  changeTodoTitle,\n}) => {\n  const [classOfLi, setClassOfLi] = useState('');\n  const [editedTitle, setEditedTitle] = useState(title);\n\n  const updateEditedTitle = (event) => {\n    const { value } = event.target;\n\n    setEditedTitle(value);\n  };\n\n  const pushEditedTitle = (event) => {\n    if (event.keyCode === 13 && editedTitle !== '') {\n      changeTodoTitle(id, editedTitle);\n      setClassOfLi('');\n    }\n\n    if (event.keyCode === 27) {\n      setClassOfLi('');\n    }\n  };\n\n  return (\n    <li\n      className={classOfLi}\n      onDoubleClick={() => setClassOfLi('editing')}\n    >\n      <div className=\"view\">\n        <Input\n          id={id}\n          completed={completed}\n          handleChecked={handleChecked}\n        />\n        <label>{title}</label>\n        <ButtonClearTodo\n          id={id}\n          deleteTodo={deleteTodo}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={editedTitle}\n        onChange={updateEditedTitle}\n        onKeyDown={pushEditedTitle}\n      />\n    </li>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  todoList,\n  handleChecked,\n  deleteTodo,\n  changeTodoTitle,\n}) => (\n  <ul className=\"todo-list\">\n    {todoList.map(todo => (\n      <TodoItem\n        key={todo.id}\n        id={todo.id}\n        completed={todo.completed}\n        title={todo.title}\n        handleChecked={handleChecked}\n        deleteTodo={deleteTodo}\n        changeTodoTitle={changeTodoTitle}\n      />\n    ))}\n  </ul>\n);\n","import React from 'react';\n\nexport const ButtonClearCompleted = ({ clearCompleted }) => (\n  <button\n    type=\"button\"\n    className=\"clear-completed\"\n    onClick={clearCompleted}\n  >\n    Clear completed\n  </button>\n);\n","import React, { useState } from 'react';\nimport { Form } from './Form';\nimport { TodoList } from './TodoList';\nimport { ButtonClearCompleted } from './ButtonClearCompleted';\n\nfunction App() {\n  const [todoList, setTodoList] = useState([]);\n  const [initialTodoList, setInitialTodoList] = useState([]);\n  const [leftTodo, setLeftTodo] = useState(0);\n  const [isShowedList, setIsShowedList] = useState(true);\n  const [filterClass, setFilterClass] = useState('all');\n\n  const addNewTodo = (newTodo) => {\n    const newTodoObj = {\n      id: +new Date(),\n      title: newTodo,\n      completed: false,\n    };\n    const left = initialTodoList.filter(\n      todo => todo.completed === false,\n    ).length + 1;\n\n    if (filterClass !== 'completed') {\n      setTodoList([...todoList, newTodoObj]);\n    }\n\n    setInitialTodoList([...initialTodoList, newTodoObj]);\n    setLeftTodo(left);\n  };\n\n  const handleChecked = (idOfTodo, changedCompleted) => {\n    const changedInitialTodos = initialTodoList.map((todo) => {\n      if (todo.id === idOfTodo) {\n        return {\n          ...todo,\n          completed: changedCompleted,\n        };\n      }\n\n      return { ...todo };\n    });\n\n    const left = changedInitialTodos.filter(\n      todo => todo.completed === false,\n    ).length;\n\n    setInitialTodoList(changedInitialTodos);\n    setLeftTodo(left);\n\n    if (filterClass === 'all') {\n      setTodoList(changedInitialTodos);\n    } else {\n      const filter = filterClass === 'completed';\n      const filteredList = changedInitialTodos.filter(\n        todo => todo.completed === filter,\n      );\n\n      setTodoList(filteredList);\n    }\n  };\n\n  const deleteTodo = (idOfTodo) => {\n    const initialTodoListAfterDelete = initialTodoList.filter(\n      todo => todo.id !== idOfTodo,\n    );\n\n    const todoListAfterDelete = todoList.filter(\n      todo => todo.id !== idOfTodo,\n    );\n\n    const left = initialTodoListAfterDelete.filter(\n      todo => todo.completed === false,\n    ).length;\n\n    setInitialTodoList(initialTodoListAfterDelete);\n    setTodoList(todoListAfterDelete);\n    setLeftTodo(left);\n  };\n\n  const changeTodoTitle = (idOfTodo, editedTitle) => {\n    const changedInitialTodos = initialTodoList.map((todo) => {\n      if (todo.id === idOfTodo) {\n        return {\n          ...todo,\n          title: editedTitle,\n        };\n      }\n\n      return { ...todo };\n    });\n\n    const changedTodos = todoList.map((todo) => {\n      if (todo.id === idOfTodo) {\n        return {\n          ...todo,\n          title: editedTitle,\n        };\n      }\n\n      return { ...todo };\n    });\n\n    setInitialTodoList(changedInitialTodos);\n    setTodoList(changedTodos);\n  };\n\n  const clearCompleted = () => {\n    const todoListWithoutCompleted = initialTodoList.filter(\n      todo => todo.completed === false,\n    );\n\n    setTodoList(todoListWithoutCompleted);\n    setInitialTodoList(todoListWithoutCompleted);\n  };\n\n  const filterBy = (parametr) => {\n    setFilterClass(parametr);\n\n    if (parametr === 'all') {\n      setTodoList(initialTodoList);\n    } else {\n      const filter = parametr === 'completed';\n      const filteredList = initialTodoList.filter(\n        todo => todo.completed === filter,\n      );\n\n      setTodoList(filteredList);\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <Form addNewTodo={addNewTodo} />\n      </header>\n\n      {!!initialTodoList.length && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              onChange={() => setIsShowedList(!isShowedList)}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            {isShowedList && (\n              <TodoList\n                todoList={todoList}\n                handleChecked={handleChecked}\n                deleteTodo={deleteTodo}\n                changeTodoTitle={changeTodoTitle}\n              />\n            )}\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${leftTodo} items left`}\n            </span>\n\n            <ul className=\"filters\">\n              <li>\n                <a\n                  href=\"#/\"\n                  className={filterClass === 'all' ? 'selected' : ''}\n                  onClick={() => filterBy('all')}\n                >\n                  All\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/active\"\n                  className={filterClass === 'active' ? 'selected' : ''}\n                  onClick={() => filterBy('active')}\n                >\n                  Active\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/completed\"\n                  className={filterClass === 'completed' ? 'selected' : ''}\n                  onClick={() => filterBy('completed')}\n                >\n                  Completed\n                </a>\n              </li>\n            </ul>\n\n            <ButtonClearCompleted clearCompleted={clearCompleted} />\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}